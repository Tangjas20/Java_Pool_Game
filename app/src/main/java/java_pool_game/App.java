/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package java_pool_game;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Bounds;
import javafx.scene.Scene;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import javafx.scene.Group;
import javafx.scene.canvas.Canvas;
import javafx.util.Duration;

import java.util.ArrayList;


public class App extends Application{
    private static final double KEY_FRAME_DURATION = 0.017;
    private ArrayList<Ball> ballsInPlay;
    public App(){

    }
    @Override
    public void start(Stage primaryStage){
        //Sets up the ConfigReader and reads from the path specified
        ConfigReader config = new ConfigReader("config.json");
        config.parse();
        this.ballsInPlay = config.returnBalls();
        primaryStage.setTitle("Assignment_2_Pool_game");

        //Creates the JavaFX scene and paints background depending on config
        Group root = new Group();
        Scene scene = new Scene(root);
        scene.setFill(Paint.valueOf(config.returnBoardColour()));

        //Configure canvas to config size
        Canvas canvas = new Canvas(config.boardX(), config.boardY());

        //Generate balls from the config file. These circles translate the balls objects to circles displayed
        ArrayList<Circle> circ = generateCircle(ballsInPlay);



//https://mkyong.com/javafx/javafx-animated-ball-example/
        //http://www.java2s.com/Code/Java/JavaFX/KeyFrameandTimelinebasedanimation.htm
        primaryStage.setScene(scene);
        root.getChildren().add(canvas);
        root.getChildren().addAll(circ);
        primaryStage.show();

        /*Bounds bounds = canvas.getBoundsInLocal();
        Timeline animationLoop = new Timeline();
        animationLoop.setCycleCount(Timeline.INDEFINITE);
        KeyFrame frame = new KeyFrame(Duration.seconds(KEY_FRAME_DURATION),
                new EventHandler<ActionEvent>() {
                    @Override
                    public void handle(ActionEvent event) {
                        int dx = 1;
                        int dy = 1;
                        Circle circle = circ.get(0);
                        Double xMin = circle.getBoundsInParent().getMinX();
                        Double yMin = circle.getBoundsInParent().getMinY();
                        Double xMax = circle.getBoundsInParent().getMaxX();
                        Double yMax = circle.getBoundsInParent().getMaxY();
                        if (xMin < 0 || xMax > scene.getWidth()) {
                            dx = dx * -1;
                        }
                        if (yMin < 0 || yMax > scene.getHeight()) {
                            dy = dy * -1;
                        }

                        circle.setTranslateX(circle.getTranslateX() + dx);
                        circle.setTranslateY(circle.getTranslateY() + dy);

                    }
                });
        animationLoop.getKeyFrames().add(frame);
        animationLoop.play();*/



    }
    public static void main(String[] args){
        launch(args);

    }

    public static ArrayList<Circle> generateCircle(ArrayList<Ball> BallsInPlay){
        ArrayList<Circle> circles = new ArrayList<Circle>();
        for (Ball ball : BallsInPlay){
            if (ball.return_colour().equals("BLUE")){
                System.out.println("BLUE");
                //make blue circle
                Circle circle = new Circle(ball.getX(), ball.getY(), ball.radius);
                circle.setFill(Paint.valueOf("BLUE"));
                circles.add(circle);
            }
            else if (ball.return_colour().equals("RED")){
                //Make red circle
                System.out.println("RED");
                Circle circle = new Circle(ball.getX(), ball.getY(), ball.radius);
                circle.setFill(Paint.valueOf("RED"));
                circles.add(circle);
            }
            else if (ball.return_colour().equals("WHITE")){
                System.out.println("WHITE");
                Circle circle = new Circle(ball.getX(), ball.getY(), ball.radius);
                circle.setFill(Paint.valueOf("WHITE"));
                circles.add(circle);
            }
        }

        return circles;
    }


}
